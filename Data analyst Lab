<p style="text-align:center">
    <a href="https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2023-01-01">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo"  />
    </a>
</p>

# **Exploratory Data Analysis Lab**

Estimated time needed: **30** minutes

In this module you get to work with the cleaned dataset from the previous module.

In this assignment you will perform the task of exploratory data analysis.
You will find out the distribution of data, presence of outliers and also determine the correlation between different columns in the dataset.

## Objectives

In this lab you will perform the following:

-   Identify the distribution of data in the dataset.

-   Identify outliers in the dataset.

-   Remove outliers from the dataset.

-   Identify correlation between features in the dataset.

* * *

## Hands on Lab

Import the pandas module.

!pip install pandas
import pandas as pd
Load the dataset into a dataframe.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv")

# Display the first few rows of the dataset
print(df.head())

## Distribution

### Determine how the data is distributed

The column `ConvertedComp` contains Salary converted to annual USD salaries using the exchange rate on 2019-02-01.

This assumes 12 working months and 50 working weeks.

Plot the distribution curve for the column `ConvertedComp`.

import pandas as pd

# Charger le dataset
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv")

# Supprimer les lignes avec des valeurs manquantes dans 'Age'
df = df.dropna(subset=['Age'])

# Calculer la matrice de corrélation
numeric_df = df.select_dtypes(include=['number'])

correlation_matrix = numeric_df.corr()

# Extraire les corrélations avec 'Age'
age_correlations = correlation_matrix['Age']

# Filtrer pour obtenir les colonnes avec une corrélation négative
negative_correlations = age_correlations[age_correlations <]

print("Colonnes avec une corrélation négative avec l'âge :")
print(negative_correlations)


df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv")

print(df['ConvertedComp'].isnull().sum())

df = df.dropna(subset=['ConvertedComp'])

median_converted_comp = df['ConvertedComp'].median()

print(f"La médiane de ConvertedComp avant la suppression des valeurs aberrantes est : {median_converted_comp}")

Plot the histogram for the column `ConvertedComp`.

plt.figure(figsize=(12, 6))
sns.histplot(df['ConvertedComp'], bins=30, kde=True, color='skyblue', stat='density', alpha=0.5)
plt.title('Distribution of ConvertedComp (Annual Salary in USD)')
plt.xlabel('ConvertedComp (USD)')
plt.ylabel('Density')
plt.xlim(0, df['ConvertedComp'].max())
plt.grid(True)
plt.show()

What is the median of the column `ConvertedComp`?

median_salary = df['ConvertedComp'].median()

print(f"The median of ConvertedComp is: {median_salary}")# your code goes here

df = df.dropna(subset=['Age'])

# Calculer l'âge médian
median_age = df['Age'].median()

print(f"L'âge médian des répondants est : {median_age}")

How many responders identified themselves only as a **Man**?

man_count = df[df['Gender'] == 'Man'].shape[0]

print(f"The number of responders who identified themselves only as a Man is: {man_count}")# your code goes here

Find out the  median ConvertedComp of responders identified themselves only as a **Woman**?

print(df[['Gender', 'ConvertedComp']].isnull().sum())

# Drop rows with missing values in Gender or ConvertedComp
df = df.dropna(subset=['Gender', 'ConvertedComp'])

# Calculate the median ConvertedComp for responders identified as 'Woman'
median_woman_salary = df[df['Gender'] == 'Woman']['ConvertedComp'].median()

print(f"The median ConvertedComp of responders who identified themselves only as a Woman is: {median_woman_salary}")
# your code goes here
df = df.dropna(subset=['ConvertedComp'])

# Calculer Q1 (25ème percentile) et Q3 (75ème percentile)
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculer l'Interquartile Range (IQR)
IQR = Q3 - Q1

# Calculer les limites inférieure et supérieure
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Créer un nouveau DataFrame sans outliers
df_no_outliers = df[(df['ConvertedComp'] >= lower_bound) & (df['ConvertedComp'] <= upper_bound)]

# Calculer la moyenne de ConvertedComp sans outliers
mean_converted_comp_no_outliers = df_no_outliers['ConvertedComp'].mean()

print(f"La moyenne de ConvertedComp après élimination des valeurs aberrantes est : {mean_converted_comp_no_outliers}")
Give the five number summary for the column `Age`?

**Double click here for hint**.

<!--
min,q1,median,q3,max of a column are its five number summary.
-->

df = df.dropna(subset=['Age'])

# Calculate the five-number summary for Age
five_number_summary = df['Age'].describe(percentiles=[.25, .5, .75])
print(five_number_summary)
# your code goes here

Plot a histogram of the column `Age`.

df = df.dropna(subset=['Age'])

# Plotting the histogram
plt.figure(figsize=(12, 6))
sns.histplot(df['Age'], bins=30, color='lightblue', kde=False)
plt.title('Histogram of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()# your code goes here

## Outliers

### Finding outliers

Find out if outliers exist in the column `ConvertedComp` using a box plot?

df = df.dropna(subset=['ConvertedComp'])

# Create a box plot for ConvertedComp
plt.figure(figsize=(12, 6))
sns.boxplot(x=df['ConvertedComp'])
plt.title('Box Plot of ConvertedComp')
plt.xlabel('ConvertedComp')
plt.grid(True)
plt.show()# your code goes here

Find out the Inter Quartile Range for the column `ConvertedComp`.

df = df.dropna(subset=['ConvertedComp'])

# Calculate Q1 (25th percentile) and Q3 (75th percentile)
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
IQR = Q3 - Q1

print(f"The Interquartile Range (IQR) for ConvertedComp is: {IQR}")# your code goes here

Find out the upper and lower bounds.

df = df.dropna(subset=['ConvertedComp'])

# Calculate Q1 (25th percentile) and Q3 (75th percentile)
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
IQR = Q3 - Q1

# Calculate lower and upper bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

print(f"Lower Bound: {lower_bound}")
print(f"Upper Bound: {upper_bound}")# your code goes here

Identify how many outliers are there in the `ConvertedComp` column.

df = df.dropna(subset=['ConvertedComp'])

# Calculate Q1 (25th percentile) and Q3 (75th percentile)
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
IQR = Q3 - Q1

# Calculate lower and upper bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identify outliers
outliers = df[(df['ConvertedComp'] < lower_bound) | (df['ConvertedComp'] > upper_bound)]

# Count the number of outliers
num_outliers = outliers.shape[0]

print(f"Number of outliers in ConvertedComp: {num_outliers}")# your code goes here

Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculer l'Interquartile Range (IQR)
IQR = Q3 - Q1

# Calculer les limites inférieure et supérieure
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Créer un nouveau DataFrame sans outliers
df_no_outliers = df[(df['ConvertedComp'] >= lower_bound) & (df['ConvertedComp'] <= upper_bound)]

# Calculer la médiane de ConvertedComp sans outliers
median_converted_comp_no_outliers = df_no_outliers['ConvertedComp'].median()

print(f"La médiane de ConvertedComp après élimination des valeurs aberrantes est : {median_converted_comp_no_outliers}")



Create a new dataframe by removing the outliers from the `ConvertedComp` column.

df = df.dropna(subset=['ConvertedComp'])

# Calculate Q1 (25th percentile) and Q3 (75th percentile)
Q1 = df['ConvertedComp'].quantile(0.25)
Q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
IQR = Q3 - Q1

# Calculate lower and upper bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Create a new DataFrame without outliers
df_no_outliers = df[(df['ConvertedComp'] >= lower_bound) & (df['ConvertedComp'] <= upper_bound)]

# Display the first few rows of the new DataFrame
print(df_no_outliers.head())# your code goes here

## Correlation

### Finding correlation

Find the correlation between `Age` and all other numerical columns.

import pandas as pd

# Load the dataset
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv")

numeric_df = df.select_dtypes(include=['number'])

correlation_matrix = numeric_df.corr()

age_correlation = correlation_matrix['Age']

print(age_correlation)

## Authors

Ramesh Sannareddy

### Other Contributors

Rav Ahuja

## Change Log

| Date (YYYY-MM-DD) | Version | Changed By        | Change Description                 |
| ----------------- | ------- | ----------------- | ---------------------------------- |
| 2020-10-17        | 0.1     | Ramesh Sannareddy | Created initial version of the lab |

 Copyright © 2020 IBM Corporation. This notebook and its source code are released under the terms of the [MIT License](https://cognitiveclass.ai/mit-license?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDA0321ENSkillsNetwork928-2023-01-01&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ).
